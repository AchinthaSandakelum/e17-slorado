name: C/C++ CI

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ '*' ]

jobs:
  # ubuntu_20:
  #   name: Ubuntu 20
  #   runs-on: ubuntu-20.04
  #   container: ubuntu:20.04
  #   steps:
  #   - name: install git
  #     run: apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:git-core/ppa && apt-get update -y && apt-get install git -y
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: install packages
  #     run: apt-get update && apt-get install -y zlib1g-dev gcc g++ autoconf automake make valgrind cmake wget unzip
  #   # - name: cuda install
  #   #   run: wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin && mv cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600 && wget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb && dpkg -i cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb && apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub && apt-get update && apt-get -y install cuda
  #   - uses: Jimver/cuda-toolkit@v0.2.7
  #     id: cuda-toolkit
  #     with:
  #       cuda: '11.3.0'
  #   - name: install libtorch
  #     run: bash scripts/install-torch10.sh
  #   - name: print pwd
  #     run: pwd
  #   - name: print ls
  #     run: ls
  #   - name: cmake configuration
  #     run: cd build && cmake ..
  #   - name: make build
  #     run: make -C $PWD/build -j 8
  #   - name: test
  #     run: make test
  #   - name: test mem
  #     run: test/test.sh mem
  # ubuntu_14:
  #   name: ubuntu_14
  #   runs-on: ubuntu-18.04
  #   container: ubuntu:14.04
  #   steps:
  #   - name: install git
  #     run: sudo apt-get install -y software-properties-common && sudo add-apt-repository ppa:git-core/ppa && sudo apt-get update -y && sudo apt-get install git -y
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: install packages
  #     run: sudo apt-get update && sudo apt-get install -y zlib1g-dev gcc g++ autoconf automake make
  #   - name: env
  #     run: lsb_release -a &&  ldd --version && gcc --version && g++ --version
  #   - name: build
  #     run:  make -j8
  #   - name: test
  #     run: make test
  ubuntu_16:
    name: Ubuntu 16
    runs-on: ubuntu-18.04
    container: ubuntu:16.04
    steps:
    - name: install git
      run: apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:git-core/ppa && apt-get update -y && apt-get install git -y
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: install packages
      run: apt-get update && apt-get install -y zlib1g-dev gcc g++ autoconf automake make valgrind cmake wget unzip
    # - name: cuda install
    #   run: wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin && mv cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600 && wget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb && dpkg -i cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb && apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub && apt-get update && apt-get -y install cuda
    - name: cuda repo setup
      run: wget https://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb && dpkg -i cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb && apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub && apt-get update
    - name: cuda install
      run: apt-get install -y
    # - name: cuda env setup
    #   run: sudo ln -s /usr/local/cuda-6.5/ /usr/local/cuda
    - name: install libtorch
      run: bash scripts/install-torch10.sh
    - name: print pwd
      run: pwd
    - name: print ls
      run: ls
    - name: cmake configuration
      run: cd build && cmake ..
    - name: make build
      run: make -C $PWD/build -j 8
    - name: test
      run: make test
    - name: test mem
      run: test/test.sh mem
  # ubuntu_18:
  #   name: Ubuntu 18
  #   runs-on: ubuntu-18.04
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: install packages
  #     run: sudo apt-get update && sudo apt-get install -y zlib1g-dev
  #   - name: build
  #     run:  make -j8
  #   - name: test
  #     run: make test
  # ubuntu_20:
  #   name: Ubuntu 20
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: install packages
  #     run: sudo apt-get update && sudo apt-get install zlib1g-dev
  #   - name: build-gcc
  #     run: make -j8
  #   - name: test-gcc
  #     run: make test
  #   - name: build-clang
  #     run: make clean && make CC=clang -j8
  #   - name: test-clang
  #     run: make test
  # ubuntu_20_icc:
  #   name: Ubuntu 20 icc
  #   runs-on: ubuntu-20.04
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: Intel Apt repository
  #     timeout-minutes: 1
  #     run: |
  #       wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
  #       sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
  #       rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
  #       echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
  #       sudo apt-get update
  #   - name: install packages
  #     run: sudo apt-get install -y zlib1g-dev libzstd-dev intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
  #   - name: Setup Intel oneAPI environment
  #     run: |
  #       source /opt/intel/oneapi/setvars.sh
  #       printenv >> $GITHUB_ENV
  #   - name: build
  #     run: make CC=icc -j8
  #   - name: test
  #     run: make test
  # os_x_11:
  #   name: OSX 11
  #   runs-on: macos-11
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: recursive
  #   - name: build
  #     run: make -j8
  #   - name: test
  #     run: make test
  # arm64:
  #   name: ubuntu arm
  #   runs-on: ubuntu-latest
  #   steps:
  #   - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset
  #   - uses: docker://multiarch/ubuntu-core:arm64-bionic
  #     with:
  #       args: 'uname -a'
  #   - uses: actions/checkout@v1
  #     with:
  #       submodules: recursive
  #   - uses: docker://multiarch/ubuntu-core:arm64-bionic
  #     with:
  #       args: >
  #         bash -c "apt-get update &&
  #         apt-get install -y zlib1g-dev gcc make &&
  #         ldd --version && gcc --version &&
  #         make && make test
